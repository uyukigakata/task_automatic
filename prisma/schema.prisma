// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String? 
  hashedPassword String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  todos          Todo[]
}

model Account {
  id                String        @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Todo {
  id        Int      @id @default(autoincrement()) // 自動インクリメントの一意なID
  title     String   // Todoのタイトル
  completed Boolean  @default(false) // 完了フラグ（デフォルトはfalse）
  userId    String   // リレーションに使用するユーザーID
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // ユーザーとのリレーション
  createdAt DateTime @default(now()) // 作成日時
  updatedAt DateTime @updatedAt      // 更新日時
}
