generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(uuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  Notification   Notification[]
  sessions       Session[]
  todos          Todo[]
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Todo {
  id               String    @id @default(uuid())
  title            String
  details          String?
  date             DateTime
  startTime        DateTime?
  endTime          DateTime?
  isComplete       Boolean   @default(false)
  userId           String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  notificationTime DateTime?
  user             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  userId    String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationSubscription {
  id        Int      @id @default(autoincrement())
  endpoint  String
  auth      String
  createdAt DateTime @default(now())
  p256dh    String
}
